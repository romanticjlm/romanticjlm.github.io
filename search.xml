<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/10/31/c-yu-yan-xi-lie-zhi-typedef-yong-fa/"/>
      <url>/2021/10/31/c-yu-yan-xi-lie-zhi-typedef-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言难点梳理"><a href="#C语言难点梳理" class="headerlink" title="C语言难点梳理"></a>C语言难点梳理</h1><h2 id="1-typedef-用法"><a href="#1-typedef-用法" class="headerlink" title="1. typedef 用法"></a>1. typedef 用法</h2><p>typedef声明，简称typedef，为现有类型创建一个新的名字，或称为类型别名。<br>typedef不仅可以为<strong>变量</strong>定义别名，可以为<strong>struct</strong>定义别名，还可以为<strong>函数指针</strong>定义别名。<br>万能用法：<strong>typedef  <span style="color:red;">原类型名</span>  <span style="color:blue;">类型别名</span>；</strong>  注意：<strong>数组和函数指针</strong>要稍加转换然后再进行类比。<br>            typedef   <strong><span style="color:red;">int</span></strong>                                     <span style="color:blue;"><strong>INT32</strong></span>;<br>            typedef   <strong><span style="color:red;">struct{int age; int high;}</span></strong>   <span style="color:blue;"><strong>student</strong></span>;<br>            <strong>对于数组：</strong><br>            typedef  int <strong><span style="color:blue;">arry2</span></strong>[2];<br>            typedef  int[2]  arry2;<code>//这种写法只是为了便于理解，不能这样使用</code><br>           <strong>对于函数指针：</strong><br>            typedef  int (* <span style="color:blue;">**pFunASdd **</span>)(int, int);<br>            typedef  int( * )(int, int)  pFunASdd;<code>//这种写法只是为了便于理解，不能这样使用</code></p><h3 id="1-1给变量定义别名"><a href="#1-1给变量定义别名" class="headerlink" title="1.1给变量定义别名"></a>1.1给变量定义别名</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span>   INT32<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token operator">*</span> pINT32<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">char</span>  INT8<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">char</span> <span class="token operator">*</span> pINT8<span class="token punctuation">;</span></code></pre><ul><li><p> <strong>给int类型变量定义别名INT32，给int*类型变量定义别名pINT32。</strong></p></li><li><p> <strong>给char类型变量定义别名INT8，给char*类型变量定义别名pINT8。</strong><br>特殊的，使用typedef定义数组别名方法：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> arry2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>给int[2]类型的数组定义了别名为arry2 。</strong><br>使用方法如下：</p><pre class=" language-c"><code class="language-c">arry2 student<span class="token punctuation">;</span>student<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>student<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span></code></pre></li></ul><p>示例代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">/*使用typedef为变量类型定义别名*/</span><span class="token keyword">typedef</span> <span class="token keyword">int</span>   INT32<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">*</span> pINT32<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">char</span>  INT8<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">char</span><span class="token operator">*</span> pINT8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*使用typedef为数组类型int[2]定义别名*/</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> arry2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    INT32 a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    pINT32 pt <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    pINT32 pt3 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    INT8 b <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>    pINT8 pt2<span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>        arry2 age2<span class="token punctuation">;</span>    pt3 <span class="token operator">=</span> age2<span class="token punctuation">;</span>    age2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>    age2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*INT32 等价于 int;  pINT32 等价于 int *; */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(INT32) = %d,sizeof(int) = %d, sizeof(a) = %d\r\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>INT32<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\r\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(pINT32) = %d,sizeof(int *) = %d, sizeof(pt) = %d\r\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pINT32<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pt = 0x%08X, *pt = %d\r\n"</span><span class="token punctuation">,</span> pt<span class="token punctuation">,</span> <span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*INT8 等价于 char;  pINT8 等价于 char *; */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(INT8) = %d,sizeof(char) = %d, sizeof(b) = %d\r\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>INT8<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %d\r\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(pINT8) = %d,sizeof(char *) = %d, sizeof(pt2) = %d\r\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pINT32<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pt2 = 0x%08X, *pt2 = %d\r\n"</span><span class="token punctuation">,</span> pt2<span class="token punctuation">,</span> <span class="token operator">*</span>pt2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* arry2 等价于 int[2]; */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(arry2) = %d, sizeof(age2) = %d\r\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arry2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>age2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age2[0] = %d, age2[1] = %d, \r\n"</span><span class="token punctuation">,</span> age2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> age2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age2 = 0x%p, pt3 = 0x%p, \r\n"</span><span class="token punctuation">,</span> age2<span class="token punctuation">,</span> pt3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><p><strong>注意所有指针的大小都为4（32位系统中），指针本质就是地址。</strong></p></li><li><p><strong>运行结果展示：</strong></p></li></ul><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E4%B9%8Btypedef%E7%94%A8%E6%B3%95/%E6%8D%95%E8%8E%B7-16326549143052-16356583054373.PNG" alt="变量"></p><h3 id="1-2-给结构体定义别名"><a href="#1-2-给结构体定义别名" class="headerlink" title="1.2 给结构体定义别名"></a>1.2 给结构体定义别名</h3><p>以学生为例，建立一个结构体，学生包含姓名。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> student<span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>使用typedef定义该结构体别名以及结构体指针别名如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> student<span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Student<span class="token punctuation">,</span> <span class="token operator">*</span>pStudent<span class="token punctuation">;</span></code></pre><p><strong>示例：</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">/*使用typedef为结构体类型定义别名*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> student<span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">;</span>    <span class="token keyword">char</span> classNo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*班级*/</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Student<span class="token punctuation">,</span> <span class="token operator">*</span>pStudent<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Student zhangsan <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"zhangSan"</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    Student lisi     <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span>    <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    pStudent p1      <span class="token operator">=</span> <span class="token operator">&amp;</span>lisi<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*Student 等价于 struct student; */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(Student)   = %d,sizeof(struct student) = %d\r\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"zhangsan name     = %s, \r\n"</span><span class="token punctuation">,</span> zhangsan<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"zhangsan age      = %d, \r\n"</span><span class="token punctuation">,</span> zhangsan<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"zhangsan classNo  = %d, \r\n"</span><span class="token punctuation">,</span> zhangsan<span class="token punctuation">.</span>classNo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*pStudent 等价于 struct student * ;*/</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(pStudent)  = %d,sizeof(struct student *) = %d\r\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pStudent<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> student <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"lisi name         = %s, \r\n"</span><span class="token punctuation">,</span> p1<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"lisi age          = %d, \r\n"</span><span class="token punctuation">,</span> p1<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"lisi classNo      = %d, \r\n"</span><span class="token punctuation">,</span> p1<span class="token operator">-></span>classNo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>运行结果：</strong></p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E4%B9%8Btypedef%E7%94%A8%E6%B3%95/%E6%8D%95%E8%8E%B71-16326548886201.PNG" alt="结构体"></p><h3 id="1-3-给函数指针定义别名"><a href="#1-3-给函数指针定义别名" class="headerlink" title="1.3 给函数指针定义别名"></a>1.3 给函数指针定义别名</h3><p>以学生为例，建立一个结构体，学生包含姓名，年龄，爱好。其中爱好对应一个函数指针,其别名为good_work。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>pFunGoodWork<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>可以进行如下类比(实际实现不能这样写)<pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>pFunGoodWork<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//typedef void(*)(void)  pFunGoodWork;</span></code></pre>先有个==函数指针类型void(*)(void)==，然后给这个==函数指针类型定义的别名为 pFunGoodWork；==</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> student<span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    pFunGoodWork GoodWork<span class="token punctuation">;</span><span class="token punctuation">}</span>Student<span class="token punctuation">,</span> <span class="token operator">*</span>pStudent<span class="token punctuation">;</span></code></pre><p><strong>示例：</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">/*使用typedef为函数指针类型定义别名*/</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>AddTest<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>pFunGoodWork<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*使用typedef为结构体类型定义别名*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> student<span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">;</span>    <span class="token keyword">char</span> classNo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*班级*/</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    pFunGoodWork GoodWork<span class="token punctuation">;</span><span class="token punctuation">}</span>Student<span class="token punctuation">,</span> <span class="token operator">*</span> pStudent<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">PlayPingPang</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Be good at playing ping pang \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">SingSong</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Be good at Singing song \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    Student students<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span>    <span class="token punctuation">{</span>        <span class="token punctuation">{</span> <span class="token string">"zhangSan"</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> PlayPingPang<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token string">"lisi"</span>    <span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> SingSong<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"student name: %s,\t age : %d,\t classNo: %d\r\n"</span><span class="token punctuation">,</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>classNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GoodWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>显示结果：</strong></p><p><img src="/images/C%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97%E4%B9%8Btypedef%E7%94%A8%E6%B3%95/%E6%8D%95%E8%8E%B73.PNG" alt="函数指针"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/31/hello-world/"/>
      <url>/2021/10/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
